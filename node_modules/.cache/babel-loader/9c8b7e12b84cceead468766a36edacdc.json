{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"../../Utils/Utils\");\n\nvar CollisionMode_1 = require(\"../../../Enums/CollisionMode\");\n\nvar Collider = function () {\n  function Collider() {}\n\n  Collider.collide = function (p1, container) {\n    for (var _i = 0, _a = container.particles.spatialGrid.queryRadius(p1.position, p1.size.value * 2); _i < _a.length; _i++) {\n      var p2 = _a[_i];\n\n      if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n        continue;\n      }\n\n      var pos1 = {\n        x: p1.position.x + p1.offset.x,\n        y: p1.position.y + p1.offset.y\n      };\n      var pos2 = {\n        x: p2.position.x + p2.offset.x,\n        y: p2.position.y + p2.offset.y\n      };\n      var dist = Utils_1.Utils.getDistanceBetweenCoordinates(pos1, pos2);\n      var defaultSize = container.retina.sizeValue;\n      var radius1 = this.getRadius(p1, defaultSize);\n      var radius2 = this.getRadius(p2, defaultSize);\n      var distP = radius1 + radius2;\n\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  };\n\n  Collider.getRadius = function (particle, fallback) {\n    return particle.bubble.radius || particle.size.value || fallback;\n  };\n\n  Collider.resolveCollision = function (p1, p2) {\n    var pos1 = {\n      x: p1.position.x + p1.offset.x,\n      y: p1.position.y + p1.offset.y\n    };\n    var pos2 = {\n      x: p2.position.x + p2.offset.x,\n      y: p2.position.y + p2.offset.y\n    };\n\n    switch (p1.particlesOptions.collisions.mode) {\n      case CollisionMode_1.CollisionMode.bounce:\n        var xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n        var yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n        var xDist = pos2.x - pos1.x;\n        var yDist = pos2.y - pos1.y;\n\n        if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n          var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n          var m1 = p1.size.value;\n          var m2 = p2.size.value;\n          var u1 = this.rotate(p1.velocity, angle);\n          var u2 = this.rotate(p2.velocity, angle);\n          var v1 = {\n            horizontal: u1.horizontal * (m1 - m2) / (m1 + m2) + u2.horizontal * 2 * m2 / (m1 + m2),\n            vertical: u1.vertical\n          };\n          var v2 = {\n            horizontal: u2.horizontal * (m1 - m2) / (m1 + m2) + u1.horizontal * 2 * m2 / (m1 + m2),\n            vertical: u2.vertical\n          };\n          var vFinal1 = this.rotate(v1, -angle);\n          var vFinal2 = this.rotate(v2, -angle);\n          p1.velocity.horizontal = vFinal1.horizontal;\n          p1.velocity.vertical = vFinal1.vertical;\n          p2.velocity.horizontal = vFinal2.horizontal;\n          p2.velocity.vertical = vFinal2.vertical;\n        }\n\n    }\n  };\n\n  Collider.rotate = function (velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  };\n\n  return Collider;\n}();\n\nexports.Collider = Collider;","map":{"version":3,"sources":["C:/Users/User/face-recognition-app/node_modules/tsparticles/dist/Classes/Interactions/Particles/Collider.js"],"names":["Object","defineProperty","exports","value","Utils_1","require","CollisionMode_1","Collider","collide","p1","container","_i","_a","particles","spatialGrid","queryRadius","position","size","length","p2","particlesOptions","collisions","enable","mode","pos1","x","offset","y","pos2","dist","Utils","getDistanceBetweenCoordinates","defaultSize","retina","sizeValue","radius1","getRadius","radius2","distP","resolveCollision","particle","fallback","bubble","radius","CollisionMode","bounce","xVelocityDiff","velocity","horizontal","yVelocityDiff","vertical","xDist","yDist","angle","Math","atan2","m1","m2","u1","rotate","u2","v1","v2","vFinal1","vFinal2","cos","sin"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"../../Utils/Utils\");\nvar CollisionMode_1 = require(\"../../../Enums/CollisionMode\");\nvar Collider = (function () {\n    function Collider() {\n    }\n    Collider.collide = function (p1, container) {\n        for (var _i = 0, _a = container.particles.spatialGrid.queryRadius(p1.position, p1.size.value * 2); _i < _a.length; _i++) {\n            var p2 = _a[_i];\n            if (p1 === p2 || !p2.particlesOptions.collisions.enable ||\n                p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode) {\n                continue;\n            }\n            var pos1 = {\n                x: p1.position.x + p1.offset.x,\n                y: p1.position.y + p1.offset.y\n            };\n            var pos2 = {\n                x: p2.position.x + p2.offset.x,\n                y: p2.position.y + p2.offset.y\n            };\n            var dist = Utils_1.Utils.getDistanceBetweenCoordinates(pos1, pos2);\n            var defaultSize = container.retina.sizeValue;\n            var radius1 = this.getRadius(p1, defaultSize);\n            var radius2 = this.getRadius(p2, defaultSize);\n            var distP = radius1 + radius2;\n            if (dist <= distP) {\n                this.resolveCollision(p1, p2);\n            }\n        }\n    };\n    Collider.getRadius = function (particle, fallback) {\n        return particle.bubble.radius || particle.size.value || fallback;\n    };\n    Collider.resolveCollision = function (p1, p2) {\n        var pos1 = {\n            x: p1.position.x + p1.offset.x,\n            y: p1.position.y + p1.offset.y\n        };\n        var pos2 = {\n            x: p2.position.x + p2.offset.x,\n            y: p2.position.y + p2.offset.y\n        };\n        switch (p1.particlesOptions.collisions.mode) {\n            case CollisionMode_1.CollisionMode.bounce:\n                var xVelocityDiff = p1.velocity.horizontal - p2.velocity.horizontal;\n                var yVelocityDiff = p1.velocity.vertical - p2.velocity.vertical;\n                var xDist = pos2.x - pos1.x;\n                var yDist = pos2.y - pos1.y;\n                if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n                    var angle = -Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n                    var m1 = p1.size.value;\n                    var m2 = p2.size.value;\n                    var u1 = this.rotate(p1.velocity, angle);\n                    var u2 = this.rotate(p2.velocity, angle);\n                    var v1 = {\n                        horizontal: u1.horizontal * (m1 - m2) / (m1 + m2) + u2.horizontal * 2 * m2 / (m1 + m2),\n                        vertical: u1.vertical,\n                    };\n                    var v2 = {\n                        horizontal: u2.horizontal * (m1 - m2) / (m1 + m2) + u1.horizontal * 2 * m2 / (m1 + m2),\n                        vertical: u2.vertical,\n                    };\n                    var vFinal1 = this.rotate(v1, -angle);\n                    var vFinal2 = this.rotate(v2, -angle);\n                    p1.velocity.horizontal = vFinal1.horizontal;\n                    p1.velocity.vertical = vFinal1.vertical;\n                    p2.velocity.horizontal = vFinal2.horizontal;\n                    p2.velocity.vertical = vFinal2.vertical;\n                }\n        }\n    };\n    Collider.rotate = function (velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    };\n    return Collider;\n}());\nexports.Collider = Collider;\n"]},"metadata":{},"sourceType":"script"}