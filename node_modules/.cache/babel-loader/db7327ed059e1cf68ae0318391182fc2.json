{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Connector = function () {\n  function Connector() {}\n\n  Connector.connect = function (container) {\n    var options = container.options;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status == 'mousemove') {\n      var mousePos = container.interactivity.mouse.position || {\n        x: 0,\n        y: 0\n      };\n      var distance = Math.abs(container.retina.connectModeRadius);\n      var query = container.particles.spatialGrid.queryRadius(mousePos, distance);\n      var i = 0;\n\n      for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n        var p1 = query_1[_i];\n        var pos1 = {\n          x: p1.position.x + p1.offset.x,\n          y: p1.position.y + p1.offset.y\n        };\n\n        for (var _a = 0, _b = query.slice(i + 1); _a < _b.length; _a++) {\n          var p2 = _b[_a];\n          var pos2 = {\n            x: p2.position.x + p2.offset.x,\n            y: p2.position.y + p2.offset.y\n          };\n          var distMax = Math.abs(container.retina.connectModeDistance);\n          var xDiff = Math.abs(pos1.x - pos2.x);\n          var yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            container.canvas.drawConnectLine(p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  };\n\n  return Connector;\n}();\n\nexports.Connector = Connector;","map":{"version":3,"sources":["C:/Users/User/face-recognition-app/node_modules/tsparticles/dist/Classes/Interactions/Mouse/Connector.js"],"names":["Object","defineProperty","exports","value","Connector","connect","container","options","interactivity","events","onHover","enable","status","mousePos","mouse","position","x","y","distance","Math","abs","retina","connectModeRadius","query","particles","spatialGrid","queryRadius","i","_i","query_1","length","p1","pos1","offset","_a","_b","slice","p2","pos2","distMax","connectModeDistance","xDiff","yDiff","canvas","drawConnectLine"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,SAAS,GAAI,YAAY;AACzB,WAASA,SAAT,GAAqB,CACpB;;AACDA,EAAAA,SAAS,CAACC,OAAV,GAAoB,UAAUC,SAAV,EAAqB;AACrC,QAAIC,OAAO,GAAGD,SAAS,CAACC,OAAxB;;AACA,QAAIA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,MAArC,IAA+CL,SAAS,CAACE,aAAV,CAAwBI,MAAxB,IAAkC,WAArF,EAAkG;AAC9F,UAAIC,QAAQ,GAAGP,SAAS,CAACE,aAAV,CAAwBM,KAAxB,CAA8BC,QAA9B,IAA0C;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAzD;AACA,UAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASd,SAAS,CAACe,MAAV,CAAiBC,iBAA1B,CAAf;AACA,UAAIC,KAAK,GAAGjB,SAAS,CAACkB,SAAV,CAAoBC,WAApB,CAAgCC,WAAhC,CAA4Cb,QAA5C,EAAsDK,QAAtD,CAAZ;AACA,UAAIS,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGN,KAA3B,EAAkCK,EAAE,GAAGC,OAAO,CAACC,MAA/C,EAAuDF,EAAE,EAAzD,EAA6D;AACzD,YAAIG,EAAE,GAAGF,OAAO,CAACD,EAAD,CAAhB;AACA,YAAII,IAAI,GAAG;AACPhB,UAAAA,CAAC,EAAEe,EAAE,CAAChB,QAAH,CAAYC,CAAZ,GAAgBe,EAAE,CAACE,MAAH,CAAUjB,CADtB;AAEPC,UAAAA,CAAC,EAAEc,EAAE,CAAChB,QAAH,CAAYE,CAAZ,GAAgBc,EAAE,CAACE,MAAH,CAAUhB;AAFtB,SAAX;;AAIA,aAAK,IAAIiB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGZ,KAAK,CAACa,KAAN,CAAYT,CAAC,GAAG,CAAhB,CAAtB,EAA0CO,EAAE,GAAGC,EAAE,CAACL,MAAlD,EAA0DI,EAAE,EAA5D,EAAgE;AAC5D,cAAIG,EAAE,GAAGF,EAAE,CAACD,EAAD,CAAX;AACA,cAAII,IAAI,GAAG;AACPtB,YAAAA,CAAC,EAAEqB,EAAE,CAACtB,QAAH,CAAYC,CAAZ,GAAgBqB,EAAE,CAACJ,MAAH,CAAUjB,CADtB;AAEPC,YAAAA,CAAC,EAAEoB,EAAE,CAACtB,QAAH,CAAYE,CAAZ,GAAgBoB,EAAE,CAACJ,MAAH,CAAUhB;AAFtB,WAAX;AAIA,cAAIsB,OAAO,GAAGpB,IAAI,CAACC,GAAL,CAASd,SAAS,CAACe,MAAV,CAAiBmB,mBAA1B,CAAd;AACA,cAAIC,KAAK,GAAGtB,IAAI,CAACC,GAAL,CAASY,IAAI,CAAChB,CAAL,GAASsB,IAAI,CAACtB,CAAvB,CAAZ;AACA,cAAI0B,KAAK,GAAGvB,IAAI,CAACC,GAAL,CAASY,IAAI,CAACf,CAAL,GAASqB,IAAI,CAACrB,CAAvB,CAAZ;;AACA,cAAIwB,KAAK,GAAGF,OAAR,IAAmBG,KAAK,GAAGH,OAA/B,EAAwC;AACpCjC,YAAAA,SAAS,CAACqC,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCM,EAArC;AACH;AACJ;;AACD,UAAEV,CAAF;AACH;AACJ;AACJ,GA7BD;;AA8BA,SAAOvB,SAAP;AACH,CAlCgB,EAAjB;;AAmCAF,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Connector = (function () {\n    function Connector() {\n    }\n    Connector.connect = function (container) {\n        var options = container.options;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status == 'mousemove') {\n            var mousePos = container.interactivity.mouse.position || { x: 0, y: 0 };\n            var distance = Math.abs(container.retina.connectModeRadius);\n            var query = container.particles.spatialGrid.queryRadius(mousePos, distance);\n            var i = 0;\n            for (var _i = 0, query_1 = query; _i < query_1.length; _i++) {\n                var p1 = query_1[_i];\n                var pos1 = {\n                    x: p1.position.x + p1.offset.x,\n                    y: p1.position.y + p1.offset.y\n                };\n                for (var _a = 0, _b = query.slice(i + 1); _a < _b.length; _a++) {\n                    var p2 = _b[_a];\n                    var pos2 = {\n                        x: p2.position.x + p2.offset.x,\n                        y: p2.position.y + p2.offset.y\n                    };\n                    var distMax = Math.abs(container.retina.connectModeDistance);\n                    var xDiff = Math.abs(pos1.x - pos2.x);\n                    var yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        container.canvas.drawConnectLine(p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    };\n    return Connector;\n}());\nexports.Connector = Connector;\n"]},"metadata":{},"sourceType":"script"}