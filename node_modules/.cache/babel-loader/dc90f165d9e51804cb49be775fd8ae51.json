{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar OutMode_1 = require(\"../../Enums/OutMode\");\n\nvar Utils_1 = require(\"../Utils/Utils\");\n\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\n\nvar Mover_1 = require(\"./Mover\");\n\nvar RotateDirection_1 = require(\"../../Enums/RotateDirection\");\n\nvar SizeAnimationStatus_1 = require(\"../../Enums/SizeAnimationStatus\");\n\nvar OpacityAnimationStatus_1 = require(\"../../Enums/OpacityAnimationStatus\");\n\nvar Updater = function () {\n  function Updater(container, particle) {\n    this.container = container;\n    this.particle = particle;\n    this.mover = new Mover_1.Mover(container, particle);\n  }\n\n  Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n    if (coordinate + radius > size && velocity > 0 || coordinate - radius < 0 && velocity < 0) {\n      outside();\n    }\n  };\n\n  Updater.prototype.update = function (delta) {\n    this.mover.move(delta);\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.fixOutOfCanvasPosition();\n    this.updateOutMode();\n  };\n\n  Updater.prototype.updateOpacity = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.opacity.animation.enable) {\n      switch (particle.opacity.status) {\n        case OpacityAnimationStatus_1.OpacityAnimationStatus.increasing:\n          if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n            particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing;\n          } else {\n            particle.opacity.value += (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing:\n          if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n            particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.increasing;\n          } else {\n            particle.opacity.value -= (particle.opacity.velocity || 0) * deltaFactor;\n          }\n\n          break;\n      }\n\n      if (particle.opacity.value < 0) {\n        particle.opacity.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateSize = function (delta) {\n    var _a;\n\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.size.animation.enable) {\n      switch (particle.size.status) {\n        case SizeAnimationStatus_1.SizeAnimationStatus.increasing:\n          if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n            particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.decreasing;\n          } else {\n            particle.size.value += (particle.size.velocity || 0) * deltaFactor;\n          }\n\n          break;\n\n        case SizeAnimationStatus_1.SizeAnimationStatus.decreasing:\n          if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n            particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.increasing;\n          } else {\n            particle.size.value -= (particle.size.velocity || 0) * deltaFactor;\n          }\n\n      }\n\n      if (particle.size.value < 0) {\n        particle.size.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateAngle = function (delta) {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n    var deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n\n    if (particle.particlesOptions.rotate.animation.enable) {\n      switch (particle.rotateDirection) {\n        case RotateDirection_1.RotateDirection.clockwise:\n          particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle > 360) {\n            particle.angle -= 360;\n          }\n\n          break;\n\n        case RotateDirection_1.RotateDirection.counterClockwise:\n        default:\n          particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n\n          if (particle.angle < 0) {\n            particle.angle += 360;\n          }\n\n          break;\n      }\n    }\n  };\n\n  Updater.prototype.fixOutOfCanvasPosition = function () {\n    var container = this.container;\n    var particle = this.particle;\n    var outMode = particle.particlesOptions.move.outMode;\n    var canvasSize = container.canvas.size;\n    var newPos;\n\n    if (outMode === OutMode_1.OutMode.bounce) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: particle.size.value\n      };\n    } else if (outMode === OutMode_1.OutMode.bounceHorizontal) {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: -particle.size.value - particle.offset.y\n      };\n    } else if (outMode === OutMode_1.OutMode.bounceVertical) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: particle.size.value\n      };\n    } else {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: -particle.size.value - particle.offset.y\n      };\n    }\n\n    if (outMode === OutMode_1.OutMode.destroy) {\n      var sizeValue = particle.size.value;\n\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      var sizeValue = particle.size.value;\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n        particle.position.y = Math.random() * canvasSize.height;\n      } else if (nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n\n      if (nextBounds.top > canvasSize.height - particle.offset.y) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.position.y = newPos.top;\n      } else if (nextBounds.bottom < -particle.offset.y) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.position.y = newPos.bottom;\n      }\n    }\n  };\n\n  Updater.prototype.updateOutMode = function () {\n    var particle = this.particle;\n\n    switch (particle.particlesOptions.move.outMode) {\n      case OutMode_1.OutMode.bounce:\n      case OutMode_1.OutMode.bounceVertical:\n      case OutMode_1.OutMode.bounceHorizontal:\n        this.updateBounce();\n        break;\n    }\n  };\n\n  Updater.prototype.updateBounce = function () {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (!container.polygon.checkInsidePolygon(particle.position)) {\n        this.polygonBounce();\n      }\n    } else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      if (particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);\n\n        if (dist > container.retina.polygonMaskMoveRadius) {\n          this.polygonBounce();\n        }\n      }\n    } else {\n      var outMode = particle.particlesOptions.move.outMode;\n      var x = particle.position.x + particle.offset.x;\n      var y = particle.position.y + particle.offset.y;\n\n      if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceHorizontal) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.horizontal;\n        Updater.checkBounds(x, size, container.canvas.size.width, velocity, function () {\n          particle.velocity.horizontal *= -1;\n        });\n      }\n\n      if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceVertical) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.vertical;\n        Updater.checkBounds(y, size, container.canvas.size.height, velocity, function () {\n          particle.velocity.vertical *= -1;\n        });\n      }\n    }\n  };\n\n  Updater.prototype.polygonBounce = function () {\n    var particle = this.particle;\n    particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;\n    particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;\n  };\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["C:/Users/User/face-recognition-app/node_modules/tsparticles/dist/Classes/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","OutMode_1","require","Utils_1","PolygonMaskType_1","Mover_1","RotateDirection_1","SizeAnimationStatus_1","OpacityAnimationStatus_1","Updater","container","particle","mover","Mover","checkBounds","coordinate","radius","size","velocity","outside","prototype","update","delta","move","updateOpacity","updateSize","updateAngle","fixOutOfCanvasPosition","updateOutMode","options","deltaFactor","fpsLimit","particlesOptions","opacity","animation","enable","status","OpacityAnimationStatus","increasing","decreasing","minimumValue","_a","SizeAnimationStatus","sizeValue","retina","rotate","rotateDirection","RotateDirection","clockwise","angle","speed","Math","PI","counterClockwise","outMode","canvasSize","canvas","newPos","OutMode","bounce","bottom","height","left","right","width","top","bounceHorizontal","offset","y","bounceVertical","x","destroy","Utils","isPointInside","position","particles","remove","nextBounds","calculateBounds","random","updateBounce","polygon","type","PolygonMaskType","none","inline","checkInsidePolygon","polygonBounce","initialPosition","dist","getDistanceBetweenCoordinates","polygonMaskMoveRadius","horizontal","vertical"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OutMode_1 = require(\"../../Enums/OutMode\");\nvar Utils_1 = require(\"../Utils/Utils\");\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\nvar Mover_1 = require(\"./Mover\");\nvar RotateDirection_1 = require(\"../../Enums/RotateDirection\");\nvar SizeAnimationStatus_1 = require(\"../../Enums/SizeAnimationStatus\");\nvar OpacityAnimationStatus_1 = require(\"../../Enums/OpacityAnimationStatus\");\nvar Updater = (function () {\n    function Updater(container, particle) {\n        this.container = container;\n        this.particle = particle;\n        this.mover = new Mover_1.Mover(container, particle);\n    }\n    Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n        if ((coordinate + radius > size && velocity > 0) ||\n            (coordinate - radius < 0 && velocity < 0)) {\n            outside();\n        }\n    };\n    Updater.prototype.update = function (delta) {\n        this.mover.move(delta);\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.fixOutOfCanvasPosition();\n        this.updateOutMode();\n    };\n    Updater.prototype.updateOpacity = function (delta) {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.opacity.animation.enable) {\n            switch (particle.opacity.status) {\n                case OpacityAnimationStatus_1.OpacityAnimationStatus.increasing:\n                    if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n                        particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.opacity.value += (particle.opacity.velocity || 0) * deltaFactor;\n                    }\n                    break;\n                case OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing:\n                    if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n                        particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.opacity.value -= (particle.opacity.velocity || 0) * deltaFactor;\n                    }\n                    break;\n            }\n            if (particle.opacity.value < 0) {\n                particle.opacity.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateSize = function (delta) {\n        var _a;\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.size.animation.enable) {\n            switch (particle.size.status) {\n                case SizeAnimationStatus_1.SizeAnimationStatus.increasing:\n                    if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n                        particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.size.value += (particle.size.velocity || 0) * deltaFactor;\n                    }\n                    break;\n                case SizeAnimationStatus_1.SizeAnimationStatus.decreasing:\n                    if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n                        particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.size.value -= (particle.size.velocity || 0) * deltaFactor;\n                    }\n            }\n            if (particle.size.value < 0) {\n                particle.size.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateAngle = function (delta) {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        var deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        if (particle.particlesOptions.rotate.animation.enable) {\n            switch (particle.rotateDirection) {\n                case RotateDirection_1.RotateDirection.clockwise:\n                    particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n                    if (particle.angle > 360) {\n                        particle.angle -= 360;\n                    }\n                    break;\n                case RotateDirection_1.RotateDirection.counterClockwise:\n                default:\n                    particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18 * deltaFactor;\n                    if (particle.angle < 0) {\n                        particle.angle += 360;\n                    }\n                    break;\n            }\n        }\n    };\n    Updater.prototype.fixOutOfCanvasPosition = function () {\n        var container = this.container;\n        var particle = this.particle;\n        var outMode = particle.particlesOptions.move.outMode;\n        var canvasSize = container.canvas.size;\n        var newPos;\n        if (outMode === OutMode_1.OutMode.bounce) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: particle.size.value,\n            };\n        }\n        else if (outMode === OutMode_1.OutMode.bounceHorizontal) {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        else if (outMode === OutMode_1.OutMode.bounceVertical) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: particle.size.value,\n            };\n        }\n        else {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        if (outMode === OutMode_1.OutMode.destroy) {\n            var sizeValue = particle.size.value;\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            var sizeValue = particle.size.value;\n            var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n            if (nextBounds.left > canvasSize.width - particle.offset.x) {\n                particle.position.x = newPos.left;\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n            else if (nextBounds.right < -particle.offset.x) {\n                particle.position.x = newPos.right;\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n            if (nextBounds.top > canvasSize.height - particle.offset.y) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.position.y = newPos.top;\n            }\n            else if (nextBounds.bottom < -particle.offset.y) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.position.y = newPos.bottom;\n            }\n        }\n    };\n    Updater.prototype.updateOutMode = function () {\n        var particle = this.particle;\n        switch (particle.particlesOptions.move.outMode) {\n            case OutMode_1.OutMode.bounce:\n            case OutMode_1.OutMode.bounceVertical:\n            case OutMode_1.OutMode.bounceHorizontal:\n                this.updateBounce();\n                break;\n        }\n    };\n    Updater.prototype.updateBounce = function () {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none &&\n            options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n            if (!container.polygon.checkInsidePolygon(particle.position)) {\n                this.polygonBounce();\n            }\n        }\n        else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n            if (particle.initialPosition) {\n                var dist = Utils_1.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);\n                if (dist > container.retina.polygonMaskMoveRadius) {\n                    this.polygonBounce();\n                }\n            }\n        }\n        else {\n            var outMode = particle.particlesOptions.move.outMode;\n            var x = particle.position.x + particle.offset.x;\n            var y = particle.position.y + particle.offset.y;\n            if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceHorizontal) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.horizontal;\n                Updater.checkBounds(x, size, container.canvas.size.width, velocity, function () {\n                    particle.velocity.horizontal *= -1;\n                });\n            }\n            if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceVertical) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.vertical;\n                Updater.checkBounds(y, size, container.canvas.size.height, velocity, function () {\n                    particle.velocity.vertical *= -1;\n                });\n            }\n        }\n    };\n    Updater.prototype.polygonBounce = function () {\n        var particle = this.particle;\n        particle.velocity.horizontal = -particle.velocity.horizontal + (particle.velocity.vertical / 2);\n        particle.velocity.vertical = -particle.velocity.vertical + (particle.velocity.horizontal / 2);\n    };\n    return Updater;\n}());\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}