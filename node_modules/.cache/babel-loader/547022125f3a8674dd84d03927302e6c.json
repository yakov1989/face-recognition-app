{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"./Utils\");\n\nvar SpatialGrid = function () {\n  function SpatialGrid(canvas) {\n    this.grid = [];\n    this.cellSize = 20;\n    this.widthSegment = Math.round(canvas.width / this.cellSize);\n    this.heightSegment = Math.round(canvas.height / this.cellSize);\n  }\n\n  SpatialGrid.prototype.setGrid = function (particles, dimension) {\n    var grid = [];\n    var widthSegment = (dimension === null || dimension === void 0 ? void 0 : dimension.width) ? (dimension === null || dimension === void 0 ? void 0 : dimension.width) / this.cellSize : this.widthSegment;\n    var heightSegment = (dimension === null || dimension === void 0 ? void 0 : dimension.height) ? (dimension === null || dimension === void 0 ? void 0 : dimension.height) / this.cellSize : this.heightSegment;\n\n    for (var _i = 0, particles_1 = particles; _i < particles_1.length; _i++) {\n      var particle = particles_1[_i];\n      var pos = {\n        x: particle.position.x + particle.offset.x,\n        y: particle.position.y + particle.offset.y\n      };\n      var posIndex = this.index(pos);\n      if (!Array.isArray(grid[posIndex.x])) grid[posIndex.x] = [];\n      if (!Array.isArray(grid[posIndex.x][posIndex.y])) grid[posIndex.x][posIndex.y] = [];\n      grid[posIndex.x][posIndex.y].push(particle);\n    }\n\n    this.widthSegment = widthSegment;\n    this.heightSegment = heightSegment;\n    this.grid = grid;\n  };\n\n  SpatialGrid.prototype.queryInCell = function (position) {\n    var pos = this.index(position);\n    return Array.isArray(this.grid[pos.x]) && Array.isArray(this.grid[pos.x][pos.y]) ? this.grid[pos.x][pos.y] || [] : [];\n  };\n\n  SpatialGrid.prototype.queryRadius = function (position, radius) {\n    var pos = this.index(position);\n    var rad = this.radius({\n      x: radius,\n      y: radius\n    });\n    var items = this.select(this.indexOp(pos, '-', rad), this.indexOp(pos, '+', rad));\n    var out = [];\n\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var item = items_1[_i];\n      var itemPos = {\n        x: item.position.x + item.offset.x,\n        y: item.position.y + item.offset.y\n      };\n\n      if (Utils_1.Utils.getDistanceBetweenCoordinates(itemPos, position) <= radius) {\n        out.push(item);\n      }\n    }\n\n    return out;\n  };\n\n  SpatialGrid.prototype.queryRadiusWithDistance = function (position, radius) {\n    var pos = this.index(position);\n    var rad = this.radius({\n      x: radius,\n      y: radius\n    });\n    var items = this.select(this.indexOp(pos, '-', rad), this.indexOp(pos, '+', rad));\n    var out = [];\n\n    for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n      var item = items_2[_i];\n      var itemPos = {\n        x: item.position.x + item.offset.x,\n        y: item.position.y + item.offset.y\n      };\n      var distance = Utils_1.Utils.getDistanceBetweenCoordinates(itemPos, position);\n\n      if (distance <= radius) {\n        out.push({\n          distance: distance,\n          particle: item\n        });\n      }\n    }\n\n    return out;\n  };\n\n  SpatialGrid.prototype.select = function (start, end) {\n    var out = [];\n\n    for (var x = start.x; x <= end.x; x++) {\n      if (!Array.isArray(this.grid[x])) {\n        continue;\n      }\n\n      for (var y = start.y; y <= end.y; y++) {\n        if (!Array.isArray(this.grid[x][y])) {\n          continue;\n        }\n\n        for (var _i = 0, _a = this.grid[x][y]; _i < _a.length; _i++) {\n          var item = _a[_i];\n          out.push(item);\n        }\n      }\n    }\n\n    return out;\n  };\n\n  SpatialGrid.prototype.index = function (position) {\n    return {\n      x: Math.round(position.x / this.widthSegment),\n      y: Math.round(position.y / this.heightSegment)\n    };\n  };\n\n  SpatialGrid.prototype.radius = function (radius) {\n    return {\n      x: Math.ceil(radius.x / this.widthSegment),\n      y: Math.ceil(radius.y / this.heightSegment)\n    };\n  };\n\n  SpatialGrid.prototype.indexOp = function (left, op, right) {\n    if (op == '+') {\n      return {\n        x: this.clamp(left.x + right.x),\n        y: this.clamp(left.y + right.y)\n      };\n    } else {\n      return {\n        x: this.clamp(left.x - right.x),\n        y: this.clamp(left.y - right.y)\n      };\n    }\n  };\n\n  SpatialGrid.prototype.clamp = function (num) {\n    return Utils_1.Utils.clamp(num, 0, this.cellSize);\n  };\n\n  return SpatialGrid;\n}();\n\nexports.SpatialGrid = SpatialGrid;","map":{"version":3,"sources":["C:/Users/User/face-recognition-app/node_modules/tsparticles/dist/Classes/Utils/SpatialGrid.js"],"names":["Object","defineProperty","exports","value","Utils_1","require","SpatialGrid","canvas","grid","cellSize","widthSegment","Math","round","width","heightSegment","height","prototype","setGrid","particles","dimension","_i","particles_1","length","particle","pos","x","position","offset","y","posIndex","index","Array","isArray","push","queryInCell","queryRadius","radius","rad","items","select","indexOp","out","items_1","item","itemPos","Utils","getDistanceBetweenCoordinates","queryRadiusWithDistance","items_2","distance","start","end","_a","ceil","left","op","right","clamp","num"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"./Utils\");\nvar SpatialGrid = (function () {\n    function SpatialGrid(canvas) {\n        this.grid = [];\n        this.cellSize = 20;\n        this.widthSegment = Math.round(canvas.width / this.cellSize);\n        this.heightSegment = Math.round(canvas.height / this.cellSize);\n    }\n    SpatialGrid.prototype.setGrid = function (particles, dimension) {\n        var grid = [];\n        var widthSegment = (dimension === null || dimension === void 0 ? void 0 : dimension.width) ? (dimension === null || dimension === void 0 ? void 0 : dimension.width) / this.cellSize : this.widthSegment;\n        var heightSegment = (dimension === null || dimension === void 0 ? void 0 : dimension.height) ? (dimension === null || dimension === void 0 ? void 0 : dimension.height) / this.cellSize : this.heightSegment;\n        for (var _i = 0, particles_1 = particles; _i < particles_1.length; _i++) {\n            var particle = particles_1[_i];\n            var pos = {\n                x: particle.position.x + particle.offset.x,\n                y: particle.position.y + particle.offset.y,\n            };\n            var posIndex = this.index(pos);\n            if (!Array.isArray(grid[posIndex.x]))\n                grid[posIndex.x] = [];\n            if (!Array.isArray(grid[posIndex.x][posIndex.y]))\n                grid[posIndex.x][posIndex.y] = [];\n            grid[posIndex.x][posIndex.y].push(particle);\n        }\n        this.widthSegment = widthSegment;\n        this.heightSegment = heightSegment;\n        this.grid = grid;\n    };\n    SpatialGrid.prototype.queryInCell = function (position) {\n        var pos = this.index(position);\n        return Array.isArray(this.grid[pos.x]) && Array.isArray(this.grid[pos.x][pos.y]) ?\n            this.grid[pos.x][pos.y] || [] : [];\n    };\n    SpatialGrid.prototype.queryRadius = function (position, radius) {\n        var pos = this.index(position);\n        var rad = this.radius({ x: radius, y: radius });\n        var items = this.select(this.indexOp(pos, '-', rad), this.indexOp(pos, '+', rad));\n        var out = [];\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var itemPos = {\n                x: item.position.x + item.offset.x,\n                y: item.position.y + item.offset.y,\n            };\n            if (Utils_1.Utils.getDistanceBetweenCoordinates(itemPos, position) <= radius) {\n                out.push(item);\n            }\n        }\n        return out;\n    };\n    SpatialGrid.prototype.queryRadiusWithDistance = function (position, radius) {\n        var pos = this.index(position);\n        var rad = this.radius({ x: radius, y: radius });\n        var items = this.select(this.indexOp(pos, '-', rad), this.indexOp(pos, '+', rad));\n        var out = [];\n        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n            var item = items_2[_i];\n            var itemPos = {\n                x: item.position.x + item.offset.x,\n                y: item.position.y + item.offset.y,\n            };\n            var distance = Utils_1.Utils.getDistanceBetweenCoordinates(itemPos, position);\n            if (distance <= radius) {\n                out.push({\n                    distance: distance,\n                    particle: item,\n                });\n            }\n        }\n        return out;\n    };\n    SpatialGrid.prototype.select = function (start, end) {\n        var out = [];\n        for (var x = start.x; x <= end.x; x++) {\n            if (!Array.isArray(this.grid[x])) {\n                continue;\n            }\n            for (var y = start.y; y <= end.y; y++) {\n                if (!Array.isArray(this.grid[x][y])) {\n                    continue;\n                }\n                for (var _i = 0, _a = this.grid[x][y]; _i < _a.length; _i++) {\n                    var item = _a[_i];\n                    out.push(item);\n                }\n            }\n        }\n        return out;\n    };\n    SpatialGrid.prototype.index = function (position) {\n        return {\n            x: Math.round(position.x / this.widthSegment),\n            y: Math.round(position.y / this.heightSegment),\n        };\n    };\n    SpatialGrid.prototype.radius = function (radius) {\n        return {\n            x: Math.ceil(radius.x / this.widthSegment),\n            y: Math.ceil(radius.y / this.heightSegment),\n        };\n    };\n    SpatialGrid.prototype.indexOp = function (left, op, right) {\n        if (op == '+') {\n            return {\n                x: this.clamp(left.x + right.x),\n                y: this.clamp(left.y + right.y),\n            };\n        }\n        else {\n            return {\n                x: this.clamp(left.x - right.x),\n                y: this.clamp(left.y - right.y),\n            };\n        }\n    };\n    SpatialGrid.prototype.clamp = function (num) {\n        return Utils_1.Utils.clamp(num, 0, this.cellSize);\n    };\n    return SpatialGrid;\n}());\nexports.SpatialGrid = SpatialGrid;\n"]},"metadata":{},"sourceType":"script"}